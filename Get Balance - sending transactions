#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Oct 23 16:11:07 2021

@author: albert
"""

from algosdk import account
from algosdk.v2client import algod
from algosdk.v2client import algod
from algosdk import mnemonic
from algosdk import transaction

def first_transaction_example(private_key, my_address):
    algod_client = algod.AlgodClient(algod_token, algod_address, headers);
    
# utility function for waiting on a transaction confirmation
def wait_for_confirmation(client, transaction_id, timeout):
    """
    Wait until the transaction is confirmed or rejected, or until 'timeout'
    number of rounds have passed.
    Args:
        transaction_id (str): the transaction to wait for
        timeout (int): maximum number of rounds to wait    
    Returns:
        dict: pending transaction information, or throws an error if the transaction
            is not confirmed or rejected in the next timeout rounds
    """
    start_round = client.status()["last-round"] + 1
    current_round = start_round

    while current_round < start_round + timeout:
        try:
            pending_txn = client.pending_transaction_info(transaction_id)
        except Exception:
            return 
        if pending_txn.get("confirmed-round", 0) > 0:
            return pending_txn
        elif pending_txn["pool-error"]:  
            raise Exception(
                'pool error: {}'.format(pending_txn["pool-error"]))
        client.status_after_block(current_round)                   
        current_round += 1
    raise Exception(
        'pending tx not found in timeout rounds, timeout value = : {}'.format(timeout))




algod_address = "https://testnet-algorand.api.purestake.io/ps2"
#algod_token: it is the APi key
algod_token = ""
headers = {
   "X-API-Key": algod_token,
}


#Definition algod_client:    
algod_client = algod.AlgodClient(algod_token, algod_address, headers);


#private_key, public_address = account.generate_account()

private_key=""

#my_adress (1)
my_address="2CIJHPFJJBQN4BPXZHJDTXEY3V6JTKM32YZQFYDIZTBBWPMXKYAD6HYLG4"

#my_adress (2)
#my_address="Y2J7AW3HHNUCCJ252W6PUWLS4FU6KXWJ7HPBRKCZCMNGG7RBRYH4GWCUVY"

my_address="CVOSWLARDMS4HWPK42WDZYX3ODYCLHMOQZSVXM62553HIY3MQSOVQVTFF4"
my_address="BYVHCQUHXPLA24TPPW75HNFYLAMZVOYSJXTPBAPLSZE3KGPTZDFCHXJKBQ"
#Connecting to the Client
account_info = algod_client.account_info(my_address)

#Getting the balance
print("Account balance: {} microAlgos".format(account_info.get('amount')) + "\n")



# build transaction
from algosdk.future.transaction import PaymentTxn

params = algod_client.suggested_params()
    # comment out the next two (2) lines to use suggested fees
params.flat_fee = True
params.fee = 1000
receiver = "Y2J7AW3HHNUCCJ252W6PUWLS4FU6KXWJ7HPBRKCZCMNGG7RBRYH4GWCUVY"
note = "Hello World".encode()

unsigned_txn = PaymentTxn(my_address, params, receiver, 1000, None, note)

# sign transaction
signed_txn = unsigned_txn.sign(private_key)

#Submit the transaction
import json
import base64

txid = algod_client.send_transaction(signed_txn)
print("Successfully sent transaction with txID: {}".format(txid))

    # wait for confirmation 
try:
    confirmed_txn = wait_for_confirmation(algod_client, txid, 4)  
except Exception as err:
     print(err)
#    return

print("Transaction information: {}".format(
        json.dumps(confirmed_txn, indent=4)))
print("Decoded note: {}".format(base64.b64decode(
        confirmed_txn["txn"]["txn"]["note"]).decode()))

